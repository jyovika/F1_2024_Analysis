---
title: "Pit Stop Power Play: Do Lightning-Fast Tire Swaps Actually Improve Your Race Results?"
subtitle: "Assignment 4 ETC5512"
author: Jyovika Aswale
format: html
editor: visual
---

:::::: panel-tabset
<!-- Task 1 Tab: Data and Documenting -->

## Data and Documenting


#### 1.1 Main Question

Do faster pitstops actually lead to better race results, or is it basically a non-factor?

#### 1.2 Sub-Questions

1.  **How do we even define “faster”?**

    -   What’s the cutoff for a “quick” pitstop (e.g., top 10% of pit times)?

2.  **What’s the relationship between pitstop speed and final finish position??**

    -   Is there a clear pattern where drivers with lightning-fast stops consistently finish higher?

3.  **Is this “pit-speed → race outcome” thing consistent across seasons?**

    -   Did pit-crew wizardry matter more back in, say, 2010 than it does in 2024?

    -   Are teams converging on similar pit times now, making the gap less impactful?

#### 1.3 Why I chose this question

1.  **Data-Driven Rigor** As a lifelong Formula 1 enthusiast, I’ve always been fascinated by the precision and strategy behind every race—and I finally have the tools to test my assumptions. Pit-stop durations and finishing positions are publicly available in CSVs and APIs, so rather than relying on anecdote or speculation, I can analyze hard numbers to determine whether quick pit stops truly influence race outcomes.

2.  **Illuminating an Underappreciated Factor** Everyone focuses on qualifying laps and engine performance, but pit-crew efficiency often feels like F1’s “secret sauce.” I’ve repeatedly wondered if those sub-23-second tire changes really move the needle on track position. By investigating this question, I hope to shed light on whether the hype around pit-crew speed is justified or if it’s overemphasized relative to other strategic elements.

3. **Future-Oriented Perspective** Formula 1 evolves rapidly: regulations change, technology advances, and strategies shift from one season to the next. I’ve long been curious about whether a fast pit stop was just a 2010-era advantage or if its impact has remained significant through 2024. By examining this question across multiple seasons, I aim to determine whether pit-lane efficiency remains a decisive factor or if its margin of influence has diminished over time.

#### 2.1 What data will you be using to answer that question?

I am using the Ergast database [Ergast database](http://ergast.com/mrd/db/) because it provides comprehensive, well-structured CSV datasets containing all necessary variables—such as pit-stop durations (milliseconds), driver IDs, race IDs, finishing positions, and race metadata. The data covers every Formula 1 race from 1950 onward, and I focus on the modern era (20011–2024) where pit-stop timing is reliably recorded. This makes it suitable for analyzing the relationship between pit-stop speed and race results.

**Licence:**
The Ergast database permits free use of its data and API strictly for personal, educational, and research purposes. It explicitly forbids charging any fees for applications or services that use the data. This non-commercial usage policy aligns perfectly with the requirements of this academic project. [Terms and Conditions](http://ergast.com/mrd/terms/)

#### 2.2 Explain why this data is suitable for the task.

1. **Pit Stops** (`pit_stops.csv`)

- Why it’s suitable:

  a. My core question hinges on “how fast was each pit stop?”—and the milliseconds column is the ground truth for that.

  b. Because Ergast covers every Grand Prix from 2009 onward, this table gives consistent, machine-readable pit times for thousands of stops.

2. **Race Results** (`results.csv`)

- Why it’s suitable:

  a. To answer “do faster pit stops correlate with better finishes”, I need each driver’s eventual race result— `positionOrder` gives a clean, numeric rank (1, 2, 3 …)

  b. Joining on `raceId`, `driverId` allows us to link each driver’s best pit‐stop duration (from `pit_stops.csv`) with exactly where they finished.

  d. The`grid` lets me control for starting position if needed (e.g. “did a fast pit stop help someone gain more places than they started?”).

  e.  statusId distinguishes DNFs (where a quick stop might not translate into a good finish) from drivers who actually crossed the line.

3. **Races** (`races.csv`)

- Why it’s suitable:

  a. By joining on raceId, we can replace numeric IDs in pit_stops.csv and results.csv with the name (e.g. “Australian Grand Prix 2024”), making tables and plots instantly comprehensible.
    
  b. The`year` field lets us filter or group races by season (e.g. isolate 2011 vs. 2015 vs. 2019 vs. 2024).
    
4. **Drivers** (`drivers.csv`)

- Why it’s suitable:

  a. I can join on driverId to replace that numeric ID with a more readable label. For instance, create a driver_full field by concatenating forename + " " + surname (e.g. "Lewis Hamilton").
    
5. **Constructors** (`constructors.csv`)

- Why it’s suitable:

  a. By joining on constructorId, I can label each pit‐stop or result row with the team name (rather than a numeric code). For example, "Red Bull Racing" vs. "McLaren".

6. **Status** (`status.csv`)

    a. In `results.csv`, each driver’s race outcome is labeled by `statusId`. Without context, statusId = 1 vs. statusId = 3 vs. statusId = 14 doesn’t tell you anything. By joining to status.csv, I can replace those numeric codes with human-readable labels.


### 3.1 Data Limitations, Privacy and Ethics

The Ergast dataset is **observational data**, comprising recorded measurements of Formula 1 race events and pit-stop durations. No experimental manipulation or intervention was performed; the data reflects real-world race conditions as they happened. While the dataset is comprehensive for official Formula 1 races during the 2009–2024 period, it is still considered a sample of the wider world of motor racing.

- **Data Limitations:**

  1. The  pit stop dataset only contains detailed pit stop timing data from around the 2010–2011 season onward. As a result, no pit stop information is available for races prior to this period. This limitation means that any analysis involving pit stop durations must exclude seasons before 2011, potentially reducing the historical range of the study.

  2. Some anomalies exist, such as rare outliers in pit-stop duration likely due to timing errors or race incidents, which require filtering during analysis.

  3. The dataset does not capture every contextual factor influencing race outcomes (e.g., weather, team strategy, mechanical failures) that might affect the interpretation of pit-stop impact.

- **Data Privacy and Ethics:**

  1. The data is fully public and sourced from official timing and results published by the FIA and race organizers.

  2. No personal or sensitive information about drivers or teams is included beyond publicly known facts (names, nationalities, race results).

  3. Usage strictly adheres to the data provider’s terms of use, which permit free non-commercial use for research and education.

### 4.1 Data Download and Processing Steps

1. **Data Download -**

  -  I visited the Ergast database website at http://ergast.com/mrd/db/.

  - On the page, I navigated to the Database Images section and scrolled down to find the CSV Database Tables download.

  - I downloaded the ZIP folder containing multiple CSV files, including circuits, constructor results, constructor standings, constructors, driver standings, lap times, pit stops, qualifying, races, results, sprint results, and status—each in .csv format.

I extracted the ZIP file and organized the relevant CSV files into a data/ directory for easy access.

  - For this project, I selected the following relevant CSV files:

    - `pit_stops.csv`

    - `results.csv`

    - `races.csv`

    - `drivers.csv`

    - `status.csv`

2. **Load in Data**

```{r, message=FALSE}
library(tidyverse)
pitstops_df <- read.csv(here::here("data/pit_stops.csv"))

results_df <- read.csv(here::here("data/results.csv"))

race_df <- read.csv(here::here("data/races.csv"))

driver_df <- read.csv(here::here("data/drivers.csv"))

constructor_df <- read.csv(here::here("data/constructors.csv"))

status_df <- read.csv(here::here("data/status.csv"))
```

3. **Data Processing**

**Step 1:** Create Driver, Races and Constructors Lookup Table:

- To make the data more readable and easier to work with, I created lookup tables for drivers, races, and constructors by replacing their numeric IDs with human-friendly names.

    - For drivers, I combined their first and last names.

    - For races, I combined the race name with the year to uniquely identify each event.

    - For constructors, I selected their names corresponding to their IDs.
```{r}
drivers_lookup <- driver_df %>%
  mutate(driver_full = paste(forename, surname)) %>%
  select(driverId, driver_full)

races_lookup <- race_df %>%
  mutate(race_full = paste(name, year)) %>%
  select(raceId, race_full, year)

constructors_lookup <- constructor_df %>%
  select(constructorId, constructor_name = name)
```

**Step 2:** Combine Data into One Table:

I merged the pit stop data with all lookup tables and selected relevant columns from race results and status tables. This creates one comprehensive dataset including driver names, race info, constructor names, pit stop details, race finishing positions, grid positions, and race outcomes.

```{r}
combined_df <- pitstops_df %>%
  left_join(drivers_lookup, by = "driverId") %>%
  left_join(races_lookup, by = "raceId") %>%
  left_join(
    results_df %>%
      select(raceId, driverId, constructorId, positionOrder, positionText, grid, statusId),
    by = c("raceId", "driverId")
  ) %>%
  left_join(constructors_lookup, by = "constructorId") %>%
  left_join(status_df, by = "statusId") %>%
  filter(year %in% c(2011, 2015, 2019, 2024)) %>%
  select(
    driver = driver_full,
    race = race_full,
    year,
    constructor = constructor_name,
    stop,
    lap,
    duration,
    milliseconds,
    positionOrder,
    grid,
    status
  )
```

**Step 3:** Filter Data by Year and Pit Stop Duration:

To focus the analysis on realistic pit stop times, I filtered out stops longer than 50 seconds and created separate datasets for each target year (2011, 2015, 2019, 2024).

```{r}
combined_2011 <- combined_df %>%
  filter(year == 2011, milliseconds <= 50000)

combined_2015 <- combined_df %>%
  filter(year == 2015, milliseconds <= 50000)

combined_2019 <- combined_df %>%
  filter(year == 2019, milliseconds <= 50000)

combined_2024 <- combined_df %>%
  filter(year == 2024, milliseconds <= 50000)

```

4. **Assumptions and Observations**

    a. **Long Pit Stops as Outliers:** Upon inspecting the data, I noticed unusually long pit stops—some lasting up to around one minute or slightly more—in 2015, 2019, and 2024. These are almost certainly due to race stoppages (e.g., red flags for weather or accidents) rather than normal tire changes. Such extreme values act as outliers and will be handled accordingly in the analysis to avoid skewing results.

    b. **Filtering Outliers:** When I remove or treat these extended pit-stop durations (around 50 seconds), I assume these represent race interruptions rather than genuine tire changes.

    c. **Completeness of Data:** I assume the Ergast database has no missing or erroneous rows for my chosen years. Missing pit-stop records or incomplete race results could bias my findings.
    

    


### Remember

Please mention any additional files that you want the markers to review, eg. read me, meta data etc.

<!-- Task 2 Tab: Writing your blogpost -->

## Blog Post

### The Pitstop Puzzle: Speedy Tires vs. Final Position

Formula 1 is all about razor-thin margins, and while the drivers get most of the spotlight, I’ve always been curious about how much those lightning-fast pit stops actually influence race outcomes. As a longtime fan, I wanted to go beyond the hype and use real data to see if quick pit crews really move the needle on finishing positions—especially across different eras as the sport has evolved. This analysis is about turning instinct into insight and shining a light on an often overlooked but crucial part of the race.

I’m testing whether faster pit stops really boost race results by checking two things for each selected year (2011, 2015, 2019, 2024):

  1. Do shorter pit-stop times (in seconds) correlate with better finishing positions?

  2. Do they translate into more places gained from a driver’s starting grid spot?

To analyze whether faster pit stops are associated with better race outcomes, I start by converting pit-stop durations from `milliseconds` to `seconds` and calculating `positionGain` as the difference between starting grid position and finishing position (`grid` − `positionOrder`).The code below shows the process for the 2011 season. The exact same steps are repeated for the years 2015, 2019, and 2024, with those code chunks hidden for brevity.

```{r, message=FALSE, results='hide'}
#2011
combined_2011 <- combined_2011 %>%
  mutate(
    seconds = milliseconds / 1000,
    positionGain = grid - positionOrder
  )
data_2011 <- combined_2011 %>%
  select(seconds, positionOrder, positionGain)
```

```{r, echo=FALSE, results='hide'}
#2015
combined_2015 <- combined_2015 %>%
  mutate(
    seconds = milliseconds / 1000,
    positionGain = grid - positionOrder
  )
data_2015 <- combined_2015 %>%
  select(seconds, positionOrder, positionGain)

#2019
combined_2019 <- combined_2019 %>%
  mutate(
    seconds = milliseconds / 1000,
    positionGain = grid - positionOrder
  )
data_2019 <- combined_2019 %>%
  select(seconds, positionOrder, positionGain)

#2024
combined_2024 <- combined_2024 %>%
  mutate(
    seconds = milliseconds / 1000,
    positionGain = grid - positionOrder
  )
data_2024 <- combined_2024 %>%
  select(seconds, positionOrder, positionGain)
```

I then run Spearman’s rank-order correlation test (`rcorr()` from the Hmisc package) on the three key variables — pit-stop time (`seconds`), finishing position (`positionOrder`), and net places gained (`positionGain`). I use Spearman’s correlation because pit-stop times are skewed and non-normally distributed, and Spearman’s method is robust to this.

I fully demonstrate the process for the 2011 season data. For 2015, 2019, and 2024, I follow the exact same procedure but keep the code hidden for brevity.

For visualization, I use the `ggpairs()` function from the GGally package to produce a matrix of plots for each year. This matrix includes:

  1. Density plots on the diagonal to show the distribution of each variable.

  2. Scatterplots with LOESS smoothing in the lower triangle to visualize relationships.

  3. Custom upper panels showing Spearman’s correlation coefficient (ρ) and p-value for each variable pair, annotated directly on the plot.

This combination offers both visual and statistical insight into how pit-stop speed relates to finishing positions and position gains, helping to paint a clear picture of the impact across different F1 seasons.

```{r, message=FALSE, fig.show='hide'}
library(Hmisc)
library(rlang)
library(GGally)
upper_fn <- function(data, mapping, ...) {

    x_name <- as_label(mapping$x)
  y_name <- as_label(mapping$y)

  x <- data[[x_name]]
  y <- data[[y_name]]

  rc <- rcorr(cbind(x, y), type = "spearman")
  rho  <- round(rc$r[1, 2], 2)
  pval <- round(rc$P[1, 2], 3)

  label <- paste0("ρ = ", rho, "\n(p = ", pval, ")")

  ggplot() +
    annotate(
      "text",
      x     = mean(range(x, na.rm = TRUE)),
      y     = mean(range(y, na.rm = TRUE)),
      label = label,
      size  = 3.5
    ) +
    xlim(range(x, na.rm = TRUE)) +
    ylim(range(y, na.rm = TRUE)) +
    theme_void()
}

p1<- ggpairs(
  data_2011,
  lower = list(continuous = "smooth"),       
  diag  = list(continuous = "densityDiag"),   
  upper = list(continuous = wrap(upper_fn))   
) + ggtitle("2015: PitStop ↔ Finish / Gain")
```

```{r, echo=FALSE}
p2<- ggpairs(
  data_2015,
  lower = list(continuous = "smooth"),       
  diag  = list(continuous = "densityDiag"),   
  upper = list(continuous = wrap(upper_fn))   
) + ggtitle("2015: PitStop ↔ Finish / Gain")


p3<- ggpairs(
  data_2019,
  lower = list(continuous = "smooth"),       
  diag  = list(continuous = "densityDiag"),   
  upper = list(continuous = wrap(upper_fn))   
) + ggtitle("2019: PitStop ↔ Finish / Gain")


p4<- ggpairs(
  data_2024,
  lower = list(continuous = "smooth"),       
  diag  = list(continuous = "densityDiag"),   
  upper = list(continuous = wrap(upper_fn))   
) + ggtitle("2024: PitStop ↔ Finish / Gain")
```

Finally, I use the cowplot package to arrange the four ggpairs() plots—one for each year—into a clean 2×2 grid for easy side-by-side comparison:

```{r, message=FALSE}
library(cowplot)

plot_grid(
   ggmatrix_gtable(p1),
   ggmatrix_gtable(p2),
   ggmatrix_gtable(p3),
   ggmatrix_gtable(p4),
   nrow = 2)

```

Here’s the lowdown on these plots for 2011, 2015, 2019, and 2024. Each grid shows how pit-stop time, finishing position, and places gained relate to each other.

On the diagonals, you see density curves for each variable — so you get a feel for how pit-stop times and race results are spread out in each year.

Down below the diagonal are scatterplots with smooth LOESS lines that show trends between variables:

  1. **For pit-stop time vs. finishing position**, the LOESS line slopes up every year — meaning slower pit stops usually go with worse finishing spots. So yeah, faster stops do tend to help you finish higher.

  2. **For pit-stop time vs. position gains**, the line’s pretty flat in most years. Back in 2011, there’s a tiny hint that quick stops helped you gain places on the track, but after that? Not much at all. Pit-stop speed doesn’t seem to guarantee overtakes anymore.

  3. **For finishing position vs. places gained**, the LOESS line slopes down, which makes sense — drivers who finish better usually gained more places during the race.

  4. Up top, you also see Spearman’s ρ and p-values — the numbers that back up what the lines are telling us statistically.

**Calculating Median Pit-Stop Times by Constructor**

To get a sense of each team’s typical pit-stop speed, I start by taking the raw combined_<year> data and, for 2011, do:
```{r}
# 2011
median_2011 <- combined_2011 %>%
  group_by(constructor) %>%
  summarise(
    median_sec = median(seconds, na.rm = TRUE),
    count = n()
  ) %>%
  arrange(median_sec)
```

– This groups all stops by `constructor`, computes the *median* of `seconds` (dropping any NAs), and also counts how many stops each team made, then sorts from fastest median to slowest.

– I repeat the exact same steps for 2015, 2019 and 2024, saving those into`median_2015`, `median_2019` and `median_2024`.

```{r, echo=FALSE}
# 2015
median_2015 <- combined_2015 %>%
  group_by(constructor) %>%
  summarise(
    median_sec = median(seconds, na.rm = TRUE),
    count = n()
  ) %>%
  arrange(median_sec)

# 2019
median_2019 <- combined_2019 %>%
  group_by(constructor) %>%
  summarise(
    median_sec = median(seconds, na.rm = TRUE),
    count = n()
  ) %>%
  arrange(median_sec)

# 2024
median_2024 <- combined_2024 %>%
  group_by(constructor) %>%
  summarise(
    median_sec = median(seconds, na.rm = TRUE),
    count = n()
  ) %>%
  arrange(median_sec)
```

Once I’ve got one tidy table of medians per constructor for each season, I stack them together and give each row a year tag:
```{r}
median_all_years <- bind_rows(
  median_2011 %>% mutate(year = 2011),
  median_2015 %>% mutate(year = 2015),
  median_2019 %>% mutate(year = 2019),
  median_2024 %>% mutate(year = 2024)
)
```

Finally, I use a single `ggplot()` call with `facet_wrap(~ year)` to draw all four bar-charts side by side:
```{r}
ggplot(median_all_years, 
       aes(
         x    = reorder(constructor, median_sec), 
         y    = median_sec, 
         fill = constructor
       )) +
  geom_col() +
  scale_fill_manual(values = team_colors) +
  facet_wrap(~ year, ncol = 2, scales = "free_y") +
  coord_flip() +
  labs(
    x = "Constructor",
    y = "Median Pit-Stop Time (s)"
  ) +
    theme_minimal() +
  theme(legend.position = "none")
```
- **2011** felt a bit like back-of-the-grid chaos—HRT was lumbering through stops at almost 24 s, while Mercedes and Red Bull were already humming in the low 21 s. A nearly 3 s gap between first and last made it feel like pit-stop practice was still “caught someone napping” territory.

- **2015** turned the screws: Manor Marussia couldn’t crack 26 s, but Mercedes was flirting with 22 s, and the spread ballooned to 4 s—teams either nailed it or totally blew it.

- By **2019** the pack had pulled itself together—Alfa Romeo was at the back around 24 s, but most squads were squeezed into a 2 s window (mid-22s), so a stray glove or misplaced wheel gun could cost you more places than the car ahead.

- Fast-forward to **2024**, and it’s pure surgical precision: even the slowest stop (Sauber, ~23.5 s) is only about 1.5 s off the leaders. Mercedes and Red Bull still own the top step, but everyone’s lurking within a few tenths—pit crews have basically become pit ninjas.

- Pulling all this together, a few big takeaways stand out:

  1. **Pit-stop speed still matters…** every year shows a clear negative Spearman correlation between stop time and finishing position—so faster stops tend to land you further up the grid (ρs in the 0.3–0.6 range, all p < .01).

  2. **…but its superpower has dimmed.** Early in the decade (2011) quicker stops even translated into extra places gained on average. By 2015 and beyond, that link with net position gain all but vanished—everyone got so good at stops that shaving a tenth here and there no longer guarantees an overtake.

  3. **Constructor medians tell the same story.** Mercedes and Red Bull have consistently owned the low-20s-second stops, while the rest of the field has steadily closed the gap—from a wild 4 s swing in 2015 to barely 1–2 s of spread in 2024.

What started as a true “make-or-break” advantage has evolved into a grid-wide baseline of excellence. Pit crews have gone from potential spoilers to precision pros, forcing teams to chase marginal gains elsewhere—strategy, tyre management, and in-lap brilliance are now the real battlegrounds. In F1’s relentless arms race, even the pits have leveled up.

#### References

1. *average time lost in f1 pit stop* —Google Search., from <https://www.google.com/search?client=safari&sca_esv=f6bc877b3d7fa12d&rls=en&sxsrf=AE3TifNqc4WTWCuQtrv0RDM97OM7CGiGCg:1748850032778&q=average+time+lost+in+f1+pit+stop&spell=1&sa=X&ved=2ahUKEwjd4N-HntKNAxUOQUEAHdmZHVAQBSgAegQIDBAB&biw=1440&bih=900&dpr=2>

2. *Exploring Data Distribution in R: A Comprehensive Guide* | R-bloggers., from <https://www.r-bloggers.com/2023/08/exploring-data-distribution-in-r-a-comprehensive-guide/>

3. *ggplot2—What is the best plot to show a distribution in R? - Stack Overflow.*, from <https://stackoverflow.com/questions/66863301/what-is-the-best-plot-to-show-a-distribution-in-r>

4. *Correlation Test Between Two Variables in R* - Easy Guides—Wiki—STHDA., from <https://www.sthda.com/english/wiki/correlation-test-between-two-variables-in-r>

5. *Pearson Correlation Testing in R Programming.* - GeeksforGeeks. <https://www.geeksforgeeks.org/pearson-correlation-testing-in-r-programming/>

6. Holtz, Y. *Correlogram – The R graph gallery.*, from <https://r-graph-gallery.com/correlogram.html>

7. *Correlation matrix with ggally* – the R Graph Gallery, from <https://r-graph-gallery.com/199-correlation-matrix-with-ggally.html>

8. *GGally R package: Extension to ggplot2 for correlation matrix and survival plots* - R software and data visualization - Easy Guides - Wiki - STHDA, from <https://www.sthda.com/english/wiki/ggally-r-package-extension-to-ggplot2-for-correlation-matrix-and-survival-plots-r-software-and-data-visualization>

9. *Having many ggpairs plots side-by-side in a grid?* · Issue #256 · ggobi/ggally. GitHub. from <https://github.com/ggobi/ggally/issues/256>

10. ChriiSchee. (2021, June 1). *Answer to “Arranging GGally plots with gridExtra?”* [Online post]. Stack Overflow.<https://stackoverflow.com/a/67787061>

11. Harrell Jr F (2025). _Hmisc: Harrell Miscellaneous_. R package version 5.2-3,
  <https://CRAN.R-project.org/package=Hmisc>.
  
12. Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A,
  Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson
  D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019).
  “Welcome to the tidyverse.” _Journal of Open Source Software_, *4*(43), 1686.
  doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.
  
13.  Wilke C (2024). _cowplot: Streamlined Plot Theme and Plot Annotations for 'ggplot2'_. R
  package version 1.1.3, <https://CRAN.R-project.org/package=cowplot>.

14. Schloerke B, Cook D, Larmarange J, Briatte F, Marbach M, Thoen E, Elberg A, Crowley J
  (2024). _GGally: Extension to 'ggplot2'_. R package version 2.2.1,
  <https://CRAN.R-project.org/package=GGally>.
  
15. Henry L, Wickham H (2024). *_rlang: Functions for Base Types and Core R* and 'Tidyverse'
  Features_. R package version 1.1.4, <https://CRAN.R-project.org/package=rlang>.



<!-- Task 3 Tab: Behind the Scenes -  -->

## Behind the Scenes

### What's in this section

### Were there any challenges that you faced in conducting this analysis.

Here is where you should tell us about your reflection on your analysis (Task 3).

Again, these are the details about **your** perspective and the gritty details behind the scenes of your analysis.
::::::
